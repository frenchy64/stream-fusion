# Program Fusion

This repository demonstrates two approaches to program fusion:

  1. Stream Fusion, an example of compile-time metaprogramming, and
  2. Transducers, an example of runtime metaprogramming.

## Stream Fusion - GHC Rewrite rules

The first implementation is a set of GHC rewrite rules that makes up
an implementation of [Stream Fusion](http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.104.7401).

The high level idea of Stream Fusion is to transform nested operations
over lists into a single pass with no intermediate data structures.
For example

```haskell
filter even $ map (+1) [1, 2, 3 ,4]
```

must build an intermediate representation for the result of the inner `map`.

Note that Haskell implements the call-by-need evaluation strategy, which means that the `filter` and `map`
operations are only realized as the caller requires them.
So we are not actually avoiding redundant passes over the list in this call, and there is effectively only 
one pass over the entire list once we force it.

### From Lists, to Streams ...

The 

### ... to Nothing at all

### Inlining

### Evaluation


## Transducers - Racket

Transducers are a way to build composable data transformations designed to work over `foldl`/`reduce`.

They were [first introduced](http://clojure.org/transducers) by Rich Hickey as a Clojure 1.7 feature.

## Basics

A *reducing function* is a function passed to `reduce`, that takes an accumulator and a value, then
returns the same type as the accumulator.

`conj` is a reducing function.

```racket
; (: conj (All (a b) (-> (List a) a (List a))))
(define conj (lambda (r v) (append r `(,v))))
```

Notice the type of conj: the first parameter and return types are identical, and it takes some input
as second parameter.

```racket
(conj '() 1)
;= > '(1)

(conj '(1) 2)
;= > '(1 2)
```

We can use this over `reduce`:

```racket
(reduce (lambda (a v)
          (conj a v))
        '() '(1 2 3 4))
;= > '(1 2 3 4)
```

By modifying the reducing function we can emulate `map`.

```racket
(reduce (lambda (a v)
          (conj a (add1 v)))
        '() '(1 2 3 4))
;= > '(1 2 3 4)
```

A `transducer` is a function of one argument that takes a reducing

### Benchmarks
